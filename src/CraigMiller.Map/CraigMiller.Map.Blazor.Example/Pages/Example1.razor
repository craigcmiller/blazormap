@page "/Example1"
@using CraigMiller.Map.Core.Geo
@using CraigMiller.Map.Core.Layers.Tiling
@using CraigMiller.Map.Core.Routes

<PageTitle>BlazorMap</PageTitle>

<ExampleMap @ref="_exampleMap" />

<div class="row g-3 mt-1">
    <div class="col-6">
        <label class="form-label">Latitude</label>
        <input @bind-value="_animateLatText" type="text" class="form-control" placeholder="decimal latitude" aria-label="Latitude">
    </div>
    <div class="col-6">
        <label class="form-label">Longitude</label>
        <input @bind-value="_animateLonText" type="text" class="form-control" placeholder="decimal longitude" aria-label="Longitude">
    </div>
</div>
<div class="row g-3 mt-1">
    <div class="col">
        <button @onclick="() => CenterOn(true)" class="btn btn-primary">Animate Zoom To</button>
        <button @onclick="() => CenterOn(false)" class="btn btn-primary">Instant Center</button>
        <button @onclick="AnimateAlongRoute" class="btn btn-primary">Animate Route</button>
    </div>
</div>

<div class="row g-3 mt-1">
    <div class="col-6">
        <label class="form-label">Rotation degrees:</label>
        <input @bind-value="_rotationDegreesStr" type="text" class="form-control" placeholder="degrees">
    </div>
    <div class="col mt-auto">
        <button @onclick="Rotate" class="btn btn-primary">Rotate</button>
    </div>
</div>

@code {
    ExampleMap? _exampleMap;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _exampleMap!.Map!.AddDebugLayers();
        }
    }

    string? _animateLatText = "50.83560181", _animateLonText = "-0.29722199";

    private void CenterOn(bool animate)
    {
        if (!double.TryParse(_animateLatText, out double lat) || !double.TryParse(_animateLonText, out double lon))
        {
            return;
        }

        AddRouteLayer(lat, lon);

        var centerLoc = new Location(lat, lon);

        var circleMarkerLayer = new CircleMarkerLayer
            {
                Locations = [ centerLoc ]
            };

        DurationAnimatedLayer<CircleMarkerLayer> animatedCircleMarker = CircleMarkerLayer.CreateAnimated(circleMarkerLayer, TimeSpan.FromSeconds(2), 8, 32);
        animatedCircleMarker.MaxRepetitions = 4;
        _exampleMap!.Map!.Engine.AddLayer(animatedCircleMarker);

        if (animate)
        {
            TimeSpan timespan = TimeSpan.FromSeconds(5);

            var pan = new PanToLocationAnimation(new Location(lat, lon), timespan, RateFunctions.AccelerateDecelerate);
            var zoom = new ZoomAnimation(0.1, TimeSpan.FromSeconds(2), RateFunctions.AccelerateDecelerate);

            _exampleMap!.Map!.Engine.EnqueueAnimation(new CombinedAnimation(new DeferredAnimation(zoom, TimeSpan.FromSeconds(3)), pan));
        }
        else
        {
            _exampleMap!.Map!.Engine.Zoom = Tile.GetZoomScale(9);
            _exampleMap!.Map!.Engine.Center = centerLoc;
        }
    }

    void AddRouteLayer(double lat, double lon)
    {
        _exampleMap!.Map!.Engine.RemoveLayers<RouteLayer>();

        RouteLayer routeLayer = new();

        routeLayer.Route.AddWaypoint(lat - 1.0, lon - 1.0);
        routeLayer.Route.AddWaypoint(lat - 0.75, lon - 0.75);
        routeLayer.Route.AddWaypoint(lat - 0.75, lon - 0.5);
        routeLayer.Route.AddWaypoint(lat - 0.5, lon - 0.75);
        routeLayer.Route.AddWaypoint(lat - 0.25, lon - 0.5);
        routeLayer.Route.AddWaypoint(lat - 0.5, lon - 0.25);
        routeLayer.Route.AddWaypoint(lat - 0.25, lon - 0.25);
        routeLayer.Route.AddWaypoint(lat - 0.25, lon + 0.25);
        routeLayer.Route.AddWaypoint(lat, lon);

        _exampleMap!.Map!.Engine.AddLayer(routeLayer);
    }

    void AnimateAlongRoute()
    {
        RouteLayer? existingRouteLayer = _exampleMap!.Map!.Engine.GetLayers<RouteLayer>().FirstOrDefault();
        if (existingRouteLayer is null)
        {
            return;
        }

        TimeSpan timeBetweenPoints = TimeSpan.FromSeconds(3);
        TimeSpan rotationDuration = TimeSpan.FromSeconds(1.5);

        Route route = existingRouteLayer.Route;
        for (int i = 1; i < route.WaypointCount; i++)
        {
            Waypoint fromWaypoint = route[i - 1];
            Waypoint toWaypoint = route[i];

            double bearingDegrees = Location.InitialBearingDegrees(fromWaypoint.Location, toWaypoint.Location);

            var zoomAnimation = new ZoomAnimation(Tile.GetZoomScale(11), timeBetweenPoints, RateFunctions.Linear);
            var panToLocationAnimation = new PanToLocationAnimation(fromWaypoint.Location, timeBetweenPoints, RateFunctions.AccelerateDecelerate);
            panToLocationAnimation.Began += AddMarkerToPanToLocationAnimation;

            if (i == 1)
            {
                _exampleMap!.Map!.Engine.EnqueueAnimation(
                    new CombinedAnimation(
                        zoomAnimation,
                        panToLocationAnimation,
                        new RotationAnimation(timeBetweenPoints, (float)bearingDegrees, RateFunctions.AccelerateDecelerate)
                    ));
            }
            else
            {
                _exampleMap!.Map!.Engine.EnqueueAnimation(
                    new CombinedAnimation(
                        zoomAnimation,
                        panToLocationAnimation,
                        new DeferredAnimation(new RotationAnimation(rotationDuration, (float)bearingDegrees, RateFunctions.AccelerateDecelerate), timeBetweenPoints - rotationDuration))
                    );
            }

            _exampleMap!.Map!.Engine.EnqueueAnimation(new PanToAreaAnimation(GeoRect.EncompassingLocations([fromWaypoint.Location, toWaypoint.Location]), TimeSpan.FromSeconds(2), RateFunctions.AccelerateDecelerate));

            if (i == route.WaypointCount - 1)
            {
                var finalPanToLocationAnimation = new PanToLocationAnimation(toWaypoint.Location, timeBetweenPoints, RateFunctions.AccelerateDecelerate);
                finalPanToLocationAnimation.Began += AddMarkerToPanToLocationAnimation;
                _exampleMap!.Map!.Engine.EnqueueAnimation(finalPanToLocationAnimation);
                _exampleMap!.Map!.Engine.EnqueueAnimation(new RotationAnimation(TimeSpan.FromSeconds(1), 0f, RateFunctions.AccelerateDecelerate));
            }
        }
    }

    void AddMarkerToPanToLocationAnimation(MapAnimationEventArgs args)
    {
        var ptla = (PanToLocationAnimation)args.Animation;

        var circleMarkerLayer = new CircleMarkerLayer
            {
                Locations = [ptla.ToLocation]
            };
        DurationAnimatedLayer<CircleMarkerLayer> animatedCircleMarker = CircleMarkerLayer.CreateAnimated(circleMarkerLayer, TimeSpan.FromSeconds(2), 8, 32);
        animatedCircleMarker.MaxRepetitions = 4;
        _exampleMap!.Map!.Engine.AddLayer(animatedCircleMarker);
    }

    string? _rotationDegreesStr;

    void Rotate()
    {
        if (!float.TryParse(_rotationDegreesStr, out float rotation))
        {
            return;
        }

        _exampleMap!.Map!.Engine.EnqueueAnimation(new RotationAnimation(TimeSpan.FromSeconds(2), rotation, RateFunctions.AccelerateDecelerate));
    }
}
